name: CI/CD Pipeline

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: 22
  CI: true

jobs:
  # Build and Lint
  build-and-lint:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - run: npm ci
      - run: npx tsc --noEmit
      - run: npx next lint
      - run: npx prettier --check .
      - run: npm run build
        env:
          SUPABASE_URL: ${{ secrets.STAGING_SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.STAGING_SUPABASE_ANON_KEY }}
          STRIPE_SECRET_KEY: ${{ secrets.STAGING_STRIPE_SECRET_KEY }}
          SUPABASE_SERVICE_KEY: ${{ secrets.STAGING_SUPABASE_SERVICE_KEY }}

  # Unit Tests
  unit-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: build-and-lint
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
      - run: npm ci
      - run: npm run test:unit -- --coverage --watchAll=false
      - uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          fail_ci_if_error: false

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: build-and-lint
    if: github.event.pull_request.head.repo.full_name == github.repository || github.event_name == 'push'
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
      SUPABASE_URL: ${{ secrets.STAGING_SUPABASE_URL }}
      SUPABASE_ANON_KEY: ${{ secrets.STAGING_SUPABASE_ANON_KEY }}
      STRIPE_SECRET_KEY: ${{ secrets.STAGING_STRIPE_SECRET_KEY }}
      SUPABASE_SERVICE_KEY: ${{ secrets.STAGING_SUPABASE_SERVICE_KEY }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
      - run: npm ci
      - run: npm run db:setup:test
      - run: npm run test:integration

  # E2E Tests
  e2e-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [unit-tests, integration-tests]
    env:
      NODE_ENV: test
      SUPABASE_URL: ${{ github.ref == 'refs/heads/main' && secrets.STAGING_SUPABASE_URL || 'http://localhost:54321' }}
      SUPABASE_ANON_KEY: ${{ github.ref == 'refs/heads/main' && secrets.STAGING_SUPABASE_ANON_KEY || 'test-anon-key' }}
      STRIPE_SECRET_KEY: ${{ github.ref == 'refs/heads/main' && secrets.STAGING_STRIPE_SECRET_KEY || 'sk_test_fake_key' }}
      STRIPE_WEBHOOK_SECRET: ${{ github.ref == 'refs/heads/main' && secrets.STAGING_STRIPE_WEBHOOK_SECRET || 'whsec_test_secret' }}
      SUPABASE_SERVICE_KEY: ${{ github.ref == 'refs/heads/main' && secrets.STAGING_SUPABASE_SERVICE_KEY || 'test-service-key' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"
      - name: Install dependencies
        run: npm ci
      - name: Load test environment
        run: cp .env.test .env
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
      - name: Run E2E tests
        run: npm run test:e2e
      - name: Upload E2E test report
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7
      - name: Upload E2E test screenshots
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-screenshots
          path: test-results/
          retention-days: 7

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [unit-tests, integration-tests, e2e-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: staging
    env:
      NODE_ENV: production
      SUPABASE_URL: ${{ secrets.STAGING_SUPABASE_URL }}
      SUPABASE_ANON_KEY: ${{ secrets.STAGING_SUPABASE_ANON_KEY }}
      STRIPE_SECRET_KEY: ${{ secrets.STAGING_STRIPE_SECRET_KEY }}
      SUPABASE_SERVICE_KEY: ${{ secrets.STAGING_SUPABASE_SERVICE_KEY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"
      - name: Install dependencies
        run: npm ci
      - name: Build application
        run: npm run build
      - name: Deploy to Staging
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
      - run: |
          sleep 30
          curl -f ${{ steps.deploy.outputs.preview-url || steps.deploy.outputs.url }}/api/health

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: deploy-staging
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
    env:
      NODE_ENV: production
      SUPABASE_URL: ${{ secrets.PROD_SUPABASE_URL }}
      SUPABASE_ANON_KEY: ${{ secrets.PROD_SUPABASE_ANON_KEY }}
      STRIPE_SECRET_KEY: ${{ secrets.PROD_STRIPE_SECRET_KEY }}
      SUPABASE_SERVICE_KEY: ${{ secrets.PROD_SUPABASE_SERVICE_KEY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"
      - name: Install dependencies
        run: npm ci
      - name: Build application
        run: npm run build
      - name: Deploy to Production
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: "--prod"
      - run: |
          sleep 60
          curl -f ${{ steps.deploy.outputs.preview-url || steps.deploy.outputs.url }}/api/health

  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: build-and-lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"
      - name: Install dependencies
        run: npm ci
      - name: Run security audit
        run: npm audit --audit-level=high
      - name: Run audit-ci
        run: npx audit-ci --config .audit-ci.json || true
      - name: Run trufflehog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
